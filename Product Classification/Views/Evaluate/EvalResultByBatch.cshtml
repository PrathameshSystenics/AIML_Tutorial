@model EvaluationBatch

@{
    ViewData["Title"] = "Evaluation Results";
}

<div class="mt-3">
    <h4>Evaluation Results: </h4>
    <ul class="list-group border-1 border-dark mt-3">
        <li class="list-group-item">
            <div class="fw-bold fs-5">Model Name: @Model.ModelName</div>
        </li>
        <li class="list-group-item">
            <div><strong>Accuracy:</strong> @Model.Metrics.Accuracy%</div>
        </li>
        <li class="list-group-item">
            <div><strong>Evaluation Date :</strong> @Model.CreatedAt</div>
        </li>
        <li class="list-group-item text-success">
            <div><strong>Correct:</strong> @Model.Metrics.Correct</div>
        </li>
        <li class="list-group-item text-danger">
            <div><strong>InCorrect:</strong> @Model.Metrics.InCorrect</div>
        </li>
        <li class="list-group-item">
            <div><strong>Total:</strong> @Model.Metrics.Total</div>
        </li>
        <li class="list-group-item">
            <div><strong>Total Time Taken:</strong> @ViewData["totalEvalTime"]</div>
        </li>
    </ul>

    <div class="d-grid row-cols-1 gap-3 mt-3">
        @foreach (var res in Model.EvaluatedResults)
        {
            <div class="card-body card-border position-relative">
                <p class="card-text">
                    @res.EvaluationData.Description
                </p>
                <span class="position-absolute top-0 start-0 fs-6 translate-middle badge rounded-pill bg-primary">
                    @res.EvaluationData.ID
                </span>

                @{
                    string modelActualResult = res.Result;
                    string modelThinkingResult = "";

                    var splitResult = res.Result.Split("</think>", 2, StringSplitOptions.None);
                    if (splitResult.Length == 2)
                    {
                        modelThinkingResult = splitResult[0];
                        modelActualResult = splitResult[1];
                    }
                }

                @if (!String.IsNullOrWhiteSpace(modelThinkingResult))
                {
                    <div class="accordion mb-3" id="Accordion-@res.ID">
                        <div class="accordion-item">
                            <h2 class="accordion-header">
                                <button class="accordion-button collapsed bg-warning text-dark p-2" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-@res.ID" aria-expanded="true" aria-controls="collapse-@res.ID">
                                    Thinking Steps
                                </button>
                            </h2>
                            <div id="collapse-@res.ID" class="accordion-collapse collapse" data-bs-parent="Accordion-@res.ID">
                                <div class="accordion-body p-2">
                                    @modelThinkingResult
                                </div>
                            </div>
                        </div>
                    </div>
                }

                <div class="alert alert-success p-0 p-2 mb-1" role="alert">
                    <strong>Expected: </strong> @res.EvaluationData.Answer
                </div>
                <div class="alert mr-2 p-2 mb-1 @(res.IsCorrect ? "alert-success" : "alert-danger")" role="alert">
                    <strong>Result: </strong> @modelActualResult
                </div>

            </div>
        }
    </div>

    @if (Model.PromptData != null)
    {

        <div class="mt-3">
            <h5>System Prompt: </h5>
            <div id="system-prompt-display">
                
            </div>
        </div>
    }
</div>

@section Scripts {
    <script src="~/lib/marked/marked.min.js"></script>
    <script>
        $(function(){
            var markedprompt=marked.parse(`@Model.PromptData.SystemPrompt`);

            $("#system-prompt-display").html(markedprompt)
        })
    </script>
}
